// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String    @id @default(uuid())
  name      String    @unique
  plan      Plan      @default(BASIC)
  maxWheels Int       @default(5)
  wheels    Wheel[]
  admins    User[]
  plays     Play[] // Track plays by company
  isActive  Boolean   @default(true)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
}

model User {
  id                  String    @id @default(uuid())
  name                String    @default("")
  email               String    @unique
  password            String
  role                Role
  companyId           String?
  company             Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)
  isActive            Boolean   @default(true)
  deletedAt           DateTime?
  createdAt           DateTime  @default(now())
  isPaid              Boolean   @default(false)
  forcePasswordChange Boolean   @default(false)
}

model Wheel {
  id            String         @id @default(uuid())
  companyId     String
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name          String
  mode          WheelMode      @default(RANDOM_WIN)
  formSchema    Json? // Schema for the lead capture form
  isActive      Boolean        @default(true)
  qrCodeLink    String? // QR code for sharing the wheel
  // New fields for social media redirection
  socialNetwork SocialNetwork? // Selected social network for redirection
  redirectUrl   String? // Redirect URL for the selected social network
  redirectText  String? // Text to show in the redirection popup
  // New fields for play limits
  playLimit     PlayLimit      @default(ONCE_PER_DAY) // How often users can play
  slots         Slot[]
  plays         Play[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Slot {
  id          String   @id @default(uuid())
  wheelId     String
  wheel       Wheel    @relation(fields: [wheelId], references: [id], onDelete: Cascade)
  label       String
  prizeCode   String?
  description String?
  color       String? // Hexadecimal color code
  weight      Int      @default(1) // Probability weight
  isWinning   Boolean  @default(false)
  position    Int      @default(0) // Display order
  isActive    Boolean  @default(true)
  plays       Play[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Play {
  id               String           @id @default(uuid())
  wheelId          String
  wheel            Wheel            @relation(fields: [wheelId], references: [id], onDelete: Cascade)
  companyId        String
  company          Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  slotId           String
  slot             Slot             @relation(fields: [slotId], references: [id], onDelete: Cascade)
  leadInfo         Json? // Store lead data (name, email, phone, etc.)
  result           PlayResult
  pin              String? // PIN code for redemption
  qrLink           String? // QR code URL for redemption
  redemptionStatus RedemptionStatus @default(PENDING)
  redeemedAt       DateTime?
  ip               String?
  createdAt        DateTime         @default(now())
}

enum Role {
  SUPER
  ADMIN
  SUB
}

enum WheelMode {
  ALL_WIN
  RANDOM_WIN
}

enum PlayResult {
  WIN
  LOSE
}

enum RedemptionStatus {
  PENDING
  REDEEMED
}

enum Plan {
  BASIC
  PREMIUM
}

// New enum for social network options
enum SocialNetwork {
  GOOGLE
  INSTAGRAM
  TIKTOK
  SNAPCHAT
  UBER_EATS
  TRIPADVISOR
  TRUSTPILOT
  DELIVEROO
  PLANITY
  FACEBOOK
  OTHER
}

// New enum for play limit options
enum PlayLimit {
  UNLIMITED
  ONCE_PER_DAY
  ONCE_PER_MONTH
}
